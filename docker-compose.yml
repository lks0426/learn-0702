version: '3.8'

services:
  db:
    # image: postgres:13
    image: pgvector/pgvector:pg16 # Use an image that includes pgvector
    # Or use ankane/pgvector, e.g., image: ankane/pgvector:latest
    # Ensure the PostgreSQL version (e.g., pg16) is compatible with your needs.
    container_name: ai_agent_postgres_db
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-password}
      POSTGRES_DB: ${POSTGRES_DB:-ai_agent_db}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-user} -d ${POSTGRES_DB:-ai_agent_db}"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:6-alpine
    container_name: ai_agent_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: ai_agent_backend_service
    command: uvicorn app.main:app --reload --host 0.0.0.0 --port 8000
    volumes:
      - ./backend/app:/app/app # Mount the app directory for hot reloading
    # ports: # No longer directly exposed to host
    #   - "8000:8000"
    environment:
      # These can be loaded from a .env file at the root of docker-compose,
      # or defined here explicitly. For local dev, .env file is convenient.
      # Ensure these match or override values in backend/.env if needed for docker context
      DATABASE_URL: ${DATABASE_URL:-postgresql://user:password@db:5432/ai_agent_db}
      SECRET_KEY: ${SECRET_KEY:-your_secret_key_for_jwt}
      ALGORITHM: ${ALGORITHM:-HS256}
      ACCESS_TOKEN_EXPIRE_MINUTES: ${ACCESS_TOKEN_EXPIRE_MINUTES:-30}
      # BACKEND_HOST: ${BACKEND_HOST:-0.0.0.0} # Not needed as uvicorn command specifies host
      # BACKEND_PORT: ${BACKEND_PORT:-8000} # Not needed as uvicorn command specifies port
    depends_on:
      db:
        condition: service_healthy # Wait for db to be healthy
      redis:
        condition: service_healthy # Wait for redis to be healthy
    env_file:
      - .env # Loads variables from the root .env file (which should source values from .env.example)

  ai_agent:
    build:
      context: ./ai-agent
      dockerfile: Dockerfile
    container_name: ai_agent_core_service
    command: uvicorn app.main:app --reload --host 0.0.0.0 --port 8001
    volumes:
      - ./ai-agent/app:/app/app # Mount for hot reloading
      # You might want to mount a local .env file directly for development if it contains keys
      # and you don't want to rely solely on the root .env for these specific keys.
      # However, using the root .env is generally cleaner for docker-compose.
      # - ./ai-agent/.env:/app/.env # Alternative way to provide .env
    # ports: # No longer directly exposed to host
    #   - "8001:8001"
    environment:
      OPENAI_API_KEY: ${OPENAI_API_KEY} # Loaded from root .env
      # PINECONE_API_KEY: ${PINECONE_API_KEY} # Loaded from root .env
      # PINECONE_ENVIRONMENT: ${PINECONE_ENVIRONMENT} # Loaded from root .env
      # PINECONE_INDEX_NAME: ${PINECONE_INDEX_NAME:-ai-agent-index} # Loaded from root .env
      # AI_AGENT_HOST: ${AI_AGENT_HOST:-0.0.0.0} # Not needed as uvicorn command specifies host
      # AI_AGENT_PORT: ${AI_AGENT_PORT:-8001} # Not needed as uvicorn command specifies port
    depends_on:
      - redis # May use Redis for short-term memory later
    env_file:
      - .env # Ensure variables like OPENAI_API_KEY are in the root .env file

  frontend:
    # For local development, we run the React development server directly.
    # The frontend/Dockerfile is for building a production image with Nginx.
    # That Dockerfile will be referenced in docker-compose.prod.yml.
    image: node:18-alpine # Use a Node image for react-scripts
    container_name: ai_agent_frontend_dev
    command: sh -c "npm install && npm start"
    working_dir: /app/frontend
    volumes:
      - ./frontend:/app/frontend # Mount the frontend code
      # To avoid issues with node_modules on different OS, you can define a named volume for node_modules
      # Or ensure node_modules is in .dockerignore if not building with Docker for dev.
      # For dev server, it's usually fine to map it and run npm install inside if needed, or rely on local node_modules.
      # - frontend_node_modules:/app/frontend/node_modules # Example of named volume for node_modules
    # ports: # No longer directly exposed to host
    #   - "3000:3000" # React dev server typically runs on port 3000
    environment:
      - NODE_ENV=development
      - CHOKIDAR_USEPOLLING=true # For Docker environments to ensure hot reloading works reliably
      - WDS_SOCKET_PORT=3000 # For webpack dev server web socket for HMR
      # REACT_APP_API_BASE_URL can be set here if needed, e.g., http://localhost:8000
      # However, using proxy in package.json is common for CRA dev with different backend port
      # Or, if Nginx is used in dev (more complex), it would handle proxying.
      # For this setup, apiService.js defaults to http://localhost:8000, which should work
      # as backend is exposed on 8000 from its container.
      # These URLs are now relative to the main Nginx gateway
      # REACT_APP_API_BASE_URL=/api/v1/backend
      # REACT_APP_AI_AGENT_API_BASE_URL=/api/v1/agent
    depends_on:
      - backend # Nginx gateway depends on these, but frontend itself doesn't directly connect anymore
      - ai_agent  # Frontend calls go to Nginx gateway
    stdin_open: true # Keeps stdin open, sometimes useful for Create React App
    tty: true       # Allocates a TTY, also useful for CRA
    # No ports exposed to host directly, Nginx gateway will handle it.

  nginx_gateway:
    build:
      context: ./nginx
      dockerfile: Dockerfile
    container_name: ai_agent_nginx_gateway
    ports:
      - "80:80" # Main entry point for HTTP
      # - "443:443" # Uncomment if SSL is configured
    depends_on:
      - backend
      - ai_agent
      - frontend
    volumes:
      # Mount the development Nginx config to override the production one copied by Dockerfile
      - ./nginx/nginx-dev.conf:/etc/nginx/conf.d/default.conf:ro
      # Mount SSL certs if used for dev (e.g. self-signed):
      # - ./nginx/ssl-dev/:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx # Persistent logs

volumes:
  postgres_data:
  nginx_logs: # Named volume for Nginx logs
  # frontend_node_modules: # Define if using named volume for node_modules
  redis_data:

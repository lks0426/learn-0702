worker_processes auto; # Auto-detect based on CPU cores

events {
    worker_connections 1024;
}

http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    access_log  /var/log/nginx/access.log  main;
    error_log   /var/log/nginx/error.log   warn;

    sendfile        on;
    tcp_nopush      on;
    tcp_nodelay     on;
    keepalive_timeout  65;
    types_hash_max_size 2048;
    server_tokens off; # Hide Nginx version for security

    gzip on;
    gzip_disable "msie6"; # For older browsers
    gzip_vary on;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_buffers 16 8k;
    gzip_http_version 1.1;
    gzip_types text/plain text/css application/json application/javascript application/x-javascript text/xml application/xml application/xml+rss image/svg+xml;

    # Define upstreams for our services
    upstream backend_service {
        server backend:8000;
    }

    upstream ai_agent_service {
        server ai_agent:8001;
    }

    upstream frontend_service_prod {
        # For production, frontend is served by its own Nginx on port 80 within its container
        server frontend:80;
    }

    server {
        listen 80;
        server_name localhost; # CHANGE THIS to your actual domain in production!

        # Security Headers (more comprehensive)
        add_header X-Content-Type-Options "nosniff" always;
        add_header X-XSS-Protection "1; mode=block" always;
        add_header X-Frame-Options "SAMEORIGIN" always;
        # add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always; # If using HTTPS
        # add_header Content-Security-Policy "default-src 'self'; script-src 'self'; style-src 'self'; img-src 'self'; font-src 'self'; connect-src 'self' ws://localhost:*;" always; # Example, needs careful tuning

        # API endpoint for Backend
        location /api/v1/backend/ {
            proxy_pass http://backend_service/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_read_timeout 300s; # Increase timeout for potentially long AI operations
            proxy_connect_timeout 75s;
        }

        # API endpoint for AI Agent
        location /api/v1/agent/ {
            proxy_pass http://ai_agent_service/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_read_timeout 300s; # Increase timeout
            proxy_connect_timeout 75s;
        }

        # Frontend (React App - Production Build)
        location / {
            proxy_pass http://frontend_service_prod; # Proxy to frontend's Nginx
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            # No WebSocket proxying needed here as it's serving static files
        }

        # Deny access to hidden files
        location ~ /\. {
            deny all;
        }

        # Health check endpoint for the gateway itself (optional)
        location /nginx_health {
            access_log off;
            return 200 "Nginx is healthy.\n";
            add_header Content-Type text/plain;
        }
    }

    # HTTPS server block (example, enable when you have SSL certs)
    # server {
    #    listen 443 ssl http2;
    #    server_name yourdomain.com; # CHANGE THIS
    #
    #    ssl_certificate /etc/nginx/ssl/live/yourdomain.com/fullchain.pem; # Path to your cert
    #    ssl_certificate_key /etc/nginx/ssl/live/yourdomain.com/privkey.pem; # Path to your key
    #    include /etc/nginx/snippets/ssl-params.conf; # SSL hardening options (create this snippet)
    #    # ssl_dhparam /etc/nginx/ssl/dhparam.pem; # Diffie-Hellman params (generate this)
    #
    #    # Redirect HTTP to HTTPS (if you also have a port 80 listener for this domain)
    #    # if ($scheme != "https") {
    #    #     return 301 https://$host$request_uri;
    #    # }
    #
    #    # Location blocks would be the same as above, or included.
    #    # Consider using include directives to avoid repetition.
    #    include /etc/nginx/conf.d/locations.inc;
    # }
}
